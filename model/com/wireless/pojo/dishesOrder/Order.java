package com.wireless.pojo.dishesOrder;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.LinkedList;import java.util.List;import java.util.Map;import com.wireless.exception.BusinessException;import com.wireless.exception.StaffError;import com.wireless.json.JsonMap;import com.wireless.json.Jsonable;import com.wireless.parcel.Parcel;import com.wireless.parcel.Parcelable;import com.wireless.pojo.distMgr.Discount;import com.wireless.pojo.distMgr.DiscountPlan;import com.wireless.pojo.member.Member;import com.wireless.pojo.menuMgr.Department;import com.wireless.pojo.menuMgr.PricePlan;import com.wireless.pojo.printScheme.Printer;import com.wireless.pojo.promotion.Coupon;import com.wireless.pojo.promotion.CouponOperation;import com.wireless.pojo.regionMgr.Region;import com.wireless.pojo.regionMgr.Table;import com.wireless.pojo.serviceRate.ServicePlan;import com.wireless.pojo.staffMgr.Privilege;import com.wireless.pojo.staffMgr.Staff;import com.wireless.pojo.util.DateUtil;import com.wireless.pojo.util.NumericUtil;import com.wireless.pojo.util.SortedList;import com.wireless.pojo.weixin.order.WxOrder;public class Order implements Parcelable, Jsonable{		//使用优惠券Builder	public static class CouponBuilder implements Parcelable{		private int orderId;		private final List<Integer> couponsToUse = SortedList.newInstance();				public CouponBuilder(int orderId){			this.orderId = orderId;		}				public int getOrderId(){			return this.orderId;		}				public CouponBuilder addCoupon(Coupon coupon){			return addCoupon(coupon.getId());		}				public CouponBuilder addCoupon(int couponId){			if(!couponsToUse.contains(couponId)){				this.couponsToUse.add(couponId);			}			return this;		}				public List<Integer> getCoupons(){			return Collections.unmodifiableList(this.couponsToUse);		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeInt(orderId);			dest.writeInt(this.couponsToUse.size());			for(int couponId : this.couponsToUse){				dest.writeInt(couponId);			}		}		@Override		public void createFromParcel(Parcel source) {			this.orderId = source.readInt();			int couponAmount = source.readInt();			for(int i = 0; i < couponAmount; i++){				this.couponsToUse.add(source.readInt());			}		}				public final static Parcelable.Creator<CouponBuilder> CREATOR = new Parcelable.Creator<CouponBuilder>() {						@Override			public CouponBuilder[] newInstance(int size) {				return new CouponBuilder[size];			}						@Override			public CouponBuilder newInstance() {				return new CouponBuilder(0);			}		};	}		//设置服务费Builder	public static class ServiceBuilder implements Parcelable{		private int orderId;		private int servicePlanId;				public ServiceBuilder(int orderId, int servicePlanId){			this.orderId = orderId;			this.servicePlanId = servicePlanId;		}				public int getOrderId(){			return this.orderId;		}				public int getServicePlanId(){			return this.servicePlanId;		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeInt(this.orderId);			dest.writeInt(this.servicePlanId);		}		@Override		public void createFromParcel(Parcel source) {			this.orderId = source.readInt();			this.servicePlanId = source.readInt();		}				public final static Parcelable.Creator<ServiceBuilder> CREATOR = new Parcelable.Creator<ServiceBuilder>() {						@Override			public ServiceBuilder[] newInstance(int size) {				return new ServiceBuilder[size];			}						@Override			public ServiceBuilder newInstance() {				return new ServiceBuilder(0, 0);			}		};	}		//修改备注Builder	public static class CommentBuilder{		private final int orderId;		private final String comment;				public CommentBuilder(Order order, String comment){			this.orderId = order.getId();			this.comment = comment;		}				public CommentBuilder(int orderId, String comment){			this.orderId = orderId;			this.comment = comment;		}		public int getOrderId(){			return this.orderId;		}				public String getComment(){			return comment;		}	}		//修改折扣Builder	public static class DiscountBuilder implements Parcelable{		private int orderId;		private int discountId;		private int pricePlanId;		private int memberId;				private DiscountBuilder(){					}		public static DiscountBuilder build4Member(int orderId, Member member, int discountId, int pricePlanId){			DiscountBuilder builder = new DiscountBuilder();			builder.orderId = orderId;			builder.memberId = member.getId();			builder.discountId = discountId <= 0 ? member.getMemberType().getDefaultDiscount().getId() : discountId;			builder.pricePlanId = pricePlanId <= 0 ? 0 : pricePlanId;			return builder;		}				public static DiscountBuilder build4Member(int orderId, Member member){			DiscountBuilder builder = new DiscountBuilder();			builder.orderId = orderId;			builder.memberId = member.getId();			builder.discountId = member.getMemberType().getDefaultDiscount().getId();			builder.pricePlanId = member.getMemberType().hasDefaultPrice() ? member.getMemberType().getDefaultPrice().getId() : 0;			return builder;		}				public static DiscountBuilder build4Normal(int orderId, int discountId){			DiscountBuilder builder = new DiscountBuilder();			builder.orderId = orderId;			builder.discountId = discountId;			return builder;		}				public int getOrderId(){			return this.orderId;		}				public int getDiscountId(){			return this.discountId;		}		public boolean hasDiscountId(){			return this.discountId != 0;		}				public int getPricePlanId(){			return this.pricePlanId;		}				public boolean hasPricePlan(){			return this.pricePlanId != 0;		}				public int getMemberId(){			return this.memberId;		}		public boolean hasMember(){			return this.memberId != 0;		}				@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeInt(this.orderId);			dest.writeInt(this.discountId);			dest.writeInt(this.memberId);			dest.writeInt(this.pricePlanId);			//FIXME to delete dest.writeInt(this.couponId)			dest.writeInt(0);		}		@Override		public void createFromParcel(Parcel source) {			this.orderId = source.readInt();			this.discountId = source.readInt();			this.memberId = source.readInt();			this.pricePlanId = source.readInt();			//FIXME to delete			source.readInt();		}				public final static Parcelable.Creator<DiscountBuilder> CREATOR = new Parcelable.Creator<DiscountBuilder>() {						@Override			public DiscountBuilder[] newInstance(int size) {				return new DiscountBuilder[size];			}						@Override			public DiscountBuilder newInstance() {				return new DiscountBuilder();			}		};	}		//反结账Builder	public static class RepaidBuilder implements Parcelable{		private DiscountBuilder discountBuilder;		private UpdateBuilder updateBuilder;		private PayBuilder payBuilder;		private ServiceBuilder serviceBuilder;		private CouponBuilder couponBuilder;		private final List<Printer> printers = new ArrayList<Printer>(); 				private RepaidBuilder(){					}		public RepaidBuilder addPrinter(int printerId){			this.printers.add(new Printer(printerId));			return this;		}				public List<Printer> getPrinters(){			return Collections.unmodifiableList(this.printers);		}				public RepaidBuilder(UpdateBuilder updateBuilder, PayBuilder payBuilder){			this.updateBuilder = updateBuilder;			this.payBuilder = payBuilder;		}				public RepaidBuilder setDiscountBuilder(DiscountBuilder discountBuilder){			this.discountBuilder = discountBuilder;			return this;		}				public RepaidBuilder setCouponBuilder(CouponBuilder couponBuilder){			this.couponBuilder = couponBuilder;			return this;		}				public CouponBuilder getCouponBuilder(){			return this.couponBuilder;		}				public boolean hasCouponBuilder(){			return this.couponBuilder != null;		}				public RepaidBuilder setServiceBuilder(ServiceBuilder serviceBuilder){			this.serviceBuilder = serviceBuilder;			return this;		}				public ServiceBuilder getServiceBuilder(){			return this.serviceBuilder;		}				public boolean hasServiceBuilder(){			return this.serviceBuilder != null;		}				public DiscountBuilder getDiscountBuilder(){			return this.discountBuilder;		}				public boolean hasDiscountBuilder(){			return this.discountBuilder != null;		}				public UpdateBuilder getUpdateBuilder(){			return this.updateBuilder;		}				public PayBuilder getPayBuilder(){			return this.payBuilder;		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcel(discountBuilder, 0);			dest.writeParcel(updateBuilder, 0);			dest.writeParcel(payBuilder, 0);			dest.writeParcel(serviceBuilder, 0);			dest.writeParcel(couponBuilder, 0);			dest.writeParcelList(printers, Printer.PARCEL_PRINTER_SIMPLE);		}		@Override		public void createFromParcel(Parcel source) {			discountBuilder = source.readParcel(DiscountBuilder.CREATOR);			updateBuilder = source.readParcel(UpdateBuilder.CREATOR);			payBuilder = source.readParcel(PayBuilder.CREATOR);			serviceBuilder = source.readParcel(ServiceBuilder.CREATOR);			couponBuilder = source.readParcel(CouponBuilder.CREATOR);			printers.addAll(source.readParcelList(Printer.CREATOR));		}				public final static Parcelable.Creator<RepaidBuilder> CREATOR = new Parcelable.Creator<RepaidBuilder>() {						@Override			public RepaidBuilder[] newInstance(int size) {				return new RepaidBuilder[size];			}						@Override			public RepaidBuilder newInstance() {				return new RepaidBuilder();			}		};	}		//赠送Builder	public static class GiftBuilder implements Parcelable{				private final Order giftOrder = new Order(0);				public GiftBuilder(Order order, OrderFood giftedFood) throws BusinessException{			this(order.getId(), giftedFood);		}				public GiftBuilder(int orderId, OrderFood giftedFood) throws BusinessException{			if(giftedFood.asFood().isGift()){				giftOrder.setId(orderId);				giftOrder.addFood(giftedFood);			}else{				throw new BusinessException(giftedFood.getName() + "不是可赠送菜品");			}		}				private GiftBuilder(){					}				public int getOrderId(){			return this.giftOrder.getId();		}				public OrderFood getGiftedFood(){			return this.giftOrder.mOrderFoods.get(0);		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcel(giftOrder, Order.ORDER_PARCELABLE_4_GIFT);		}		@Override		public void createFromParcel(Parcel source) {			giftOrder.copyFrom(source.readParcel(Order.CREATOR));		}				public final static Parcelable.Creator<GiftBuilder> CREATOR = new Parcelable.Creator<GiftBuilder>() {						@Override			public GiftBuilder[] newInstance(int size) {				return new GiftBuilder[size];			}						@Override			public GiftBuilder newInstance() {				return new GiftBuilder();			}		};	} 		//转菜Builder	public static class TransferBuilder implements Parcelable {				private final Order transferOrder = new Order(0);				private TransferBuilder(){					}		public TransferBuilder(int srcOrderId, Table.Builder tblBuilder){			transferOrder.setId(srcOrderId);			transferOrder.setDestTbl(tblBuilder.build());		}		public TransferBuilder(Order src, Table.Builder tblBuilder){			transferOrder.copyFrom(src);			transferOrder.setDestTbl(tblBuilder.build());		}		public TransferBuilder(Order src, Table.AliasBuilder tblBuilder){			transferOrder.copyFrom(src);			transferOrder.setDestTbl(tblBuilder.build());		}				public TransferBuilder(int srcOrderId, Table.AliasBuilder tblBuilder){			transferOrder.setId(srcOrderId);			transferOrder.setDestTbl(tblBuilder.build());		}				public TransferBuilder addAll(List<OrderFood> orderFoods){			if(orderFoods != null){				this.transferOrder.addFoods(orderFoods);			}			return this;		}				public TransferBuilder add(OrderFood of) throws BusinessException{			if(of != null){				this.transferOrder.addFood(of);			}			return this;		}				public int getSourceOrderId(){			return this.transferOrder.getId();		}				public List<OrderFood> getTransferFoods(){			return this.transferOrder.getOrderFoods();		}				public Table getDestTbl(){			return this.transferOrder.getDestTbl();		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcel(transferOrder, Order.ORDER_PARCLEABLE_4_TRANSFER);		}		@Override		public void createFromParcel(Parcel source) {			transferOrder.copyFrom(source.readParcel(Order.CREATOR));		}				public final static Parcelable.Creator<TransferBuilder> CREATOR = new Parcelable.Creator<TransferBuilder>() {						@Override			public TransferBuilder[] newInstance(int size) {				return new TransferBuilder[size];			}						@Override			public TransferBuilder newInstance() {				return new TransferBuilder();			}		};	}		//多台开席Builder	public static class InsertMultiBuilder{		private final List<InsertBuilder> builders = new ArrayList<InsertBuilder>();				public InsertMultiBuilder add(InsertBuilder builder){			this.builders.add(builder);			return this;		}				public List<InsertBuilder> getBuilders(){			return Collections.unmodifiableList(this.builders);		}	}		//并台Builder	public static class MergeBuilder{		private final Table dest;		private final List<Table> builders = new ArrayList<Table>();				public MergeBuilder(int destId){			this.dest = new Table(destId);		}				public MergeBuilder(Table dest){			this.dest = dest;		}		public MergeBuilder add(int mergeTbl){			this.builders.add(new Table(mergeTbl));			return this;		}				public MergeBuilder add(Table mergeTbl){			this.builders.add(mergeTbl);			return this;		}				public Table getDest(){			return this.dest;		}				public List<Table> getBuilders(){			return Collections.unmodifiableList(this.builders);		}	}		public static class InsertBuilder implements Parcelable, Jsonable{		private final Order orderToInsert = new Order(0);				private boolean isForce;				private Table.InsertBuilder4Join.Suffix suffix;				private int fastNo;				private final List<Printer> printers = new ArrayList<Printer>();				private InsertBuilder(){}		private InsertBuilder(Category category){			this.orderToInsert.setCustomNum(1);			this.orderToInsert.setCategory(category);		}				private InsertBuilder(Table table, Category category){			this(category);			this.orderToInsert.setDestTbl(table);		}				public static InsertBuilder newInstance4Takeout(WxOrder wxOrder){			InsertBuilder builder = new InsertBuilder(Category.TAKE_OUT);			builder.addWxOrder(wxOrder);			return builder;		}				public static InsertBuilder newInstance4Fast(int fastNo){			InsertBuilder builder = new InsertBuilder(new Table.InsertBuilder4Fast(fastNo).build(), Category.FAST);			builder.fastNo = fastNo;			return builder;		}				public static InsertBuilder newInstance4Feast(){			InsertBuilder builder = new InsertBuilder(new Table.InsertBuilder4Feast().build(), Category.FEAST);			return builder;		}				public static InsertBuilder newInstance4Join(Table.Builder tblBuilder, Table.InsertBuilder4Join.Suffix suffix){			InsertBuilder builder = new InsertBuilder(tblBuilder.build(), Category.JOIN);			builder.suffix = suffix;			return builder;		}				public static InsertBuilder newInstance4Book(Table.Builder tblBuilder){			InsertBuilder builder = new InsertBuilder(tblBuilder.build(), Category.NORMAL);			return builder;		}				public InsertBuilder(Table.Builder tblBuilder){			this(tblBuilder.build(), Category.NORMAL);		}		public InsertBuilder addPrinter(int printerId){			this.printers.add(new Printer(printerId));			return this;		}		public List<Printer> getPrinters(){			return Collections.unmodifiableList(this.printers);		}				public InsertBuilder add(OrderFood of, Staff staff) throws BusinessException{			orderToInsert.addFood(of, staff);			return this;		}				public InsertBuilder addAll(List<OrderFood> orderFoods, Staff staff) throws BusinessException{			if(orderFoods != null){				this.orderToInsert.addFoods(orderFoods, staff);			}			return this;		}				public InsertBuilder addWxOrder(WxOrder wxOrder){			this.orderToInsert.addWxOrder(wxOrder);			return this;		}				public InsertBuilder setWxOrders(List<WxOrder> wxOrders){			this.orderToInsert.setWxOrders(wxOrders);			return this;		}				public InsertBuilder setCustomNum(int customNum){			if(customNum >= 1){				this.orderToInsert.setCustomNum(customNum);			}			return this;		}		public InsertBuilder setComment(String comment){			this.orderToInsert.setComment(comment);			return this;		}				public InsertBuilder setForce(boolean onOff){			this.isForce = onOff;			return this;		}				public boolean isForce(){			return this.isForce;		}				@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcel(orderToInsert, Order.ORDER_PARCELABLE_4_INSERT);			dest.writeParcelList(printers, Printer.PARCEL_PRINTER_SIMPLE);			if(orderToInsert.getCategory().isJoin()){				dest.writeString(suffix.getVal());			}else if(orderToInsert.getCategory().isFast()){				dest.writeInt(fastNo);			}		}		@Override		public void createFromParcel(Parcel source) {			orderToInsert.copyFrom(source.readParcel(Order.CREATOR));			printers.addAll(source.readParcelList(Printer.CREATOR));			if(orderToInsert.getCategory().isJoin()){				this.suffix = Table.InsertBuilder4Join.Suffix.valueOf(source.readString(), 0);			}else if(orderToInsert.getCategory().isFast()){				this.fastNo = source.readInt();			}		}				public Order build(){			return orderToInsert;		}				public Table.InsertBuilder4Join.Suffix getSuffix(){			return this.suffix;		}				public int getFastNo(){			return this.fastNo;		}				public final static Parcelable.Creator<InsertBuilder> CREATOR = new Parcelable.Creator<InsertBuilder>() {						@Override			public InsertBuilder[] newInstance(int size) {				return new InsertBuilder[size];			}						@Override			public InsertBuilder newInstance() {				return new InsertBuilder();			}		};		@Override		public JsonMap toJsonMap(int flag) {			throw new UnsupportedOperationException();		}		@Override		public void fromJsonMap(JsonMap jsonMap, int flag) {			//talbe id...must			if(jsonMap.containsKey(Key4Json.TABLE_ID.key)){				Table table = new Table(0);				table.setId(jsonMap.getInt(Key4Json.TABLE_ID.key));				orderToInsert.setDestTbl(table);			}else{				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.TABLE_ID + ")");			}			//table alias...optional			if(jsonMap.containsKey(Key4Json.TABLE_ALIAS.key)){				orderToInsert.getDestTbl().setTableAlias(jsonMap.getInt(Key4Json.TABLE_ALIAS.key));			}			//开台备注			orderToInsert.setComment(jsonMap.getString(Key4Json.COMMENT.key));			//custom number...optional			orderToInsert.setCustomNum(jsonMap.getInt(Key4Json.CUSTOM_NUM.key));			//order foods...optional			for(OrderFood of : jsonMap.getJsonableList(Key4Json.ORDER_FOOD.key, OrderFood.JSON_CREATOR, OrderFood.OF_JSONABLE_4_COMMIT)){				orderToInsert.addFood(of);			}		}				public static Jsonable.Creator<InsertBuilder> JSON_CREATOR = new Jsonable.Creator<InsertBuilder>() {			@Override			public InsertBuilder newInstance() {				return new InsertBuilder();			}		};	}		public static class FeastBuilder implements Parcelable{				private static class FeastEntry implements Map.Entry<Department, Float>, Parcelable{			private Department dept;			private float price;						private FeastEntry(){							}						private FeastEntry(Department dept, float price){				this.dept = dept;				this.price = price;			}						@Override			public Department getKey() {				return dept;			}			@Override			public Float getValue() {				return price;			}			@Override			public Float setValue(Float value) {				return null;			}			@Override			public void writeToParcel(Parcel dest, int flag) {				dest.writeParcel(dept, Department.DEPT_PARCELABLE_SIMPLE);				dest.writeFloat(price);			}			@Override			public void createFromParcel(Parcel source) {				this.dept = source.readParcel(Department.DEPT_CREATOR);				this.price = source.readFloat();			}						public final static Parcelable.Creator<FeastEntry> CREATOR = new Parcelable.Creator<FeastEntry>() {								@Override				public FeastEntry[] newInstance(int size) {					return new FeastEntry[size];				}								@Override				public FeastEntry newInstance() {					return new FeastEntry();				}			};						@Override			public boolean equals(Object obj){				if(obj == null || !(obj instanceof FeastEntry)){					return false;				}else{					return dept.getId() == ((FeastEntry)obj).dept.getId();				}			}					} 				private final List<FeastEntry> incomeByDept = new ArrayList<FeastEntry>();				public FeastBuilder(){					}		public FeastBuilder add(int deptId, float income){			return add(Department.DeptId.valueOf(deptId), income);		}				public FeastBuilder add(Department.DeptId deptId, float income){			return add(new Department(deptId.getVal()), income);		}				public FeastBuilder add(Department dept, float income){			if(incomeByDept.contains(dept)){				throw new IllegalArgumentException("");			}else{				incomeByDept.add(new FeastEntry(dept, income));			}			return this;		}				public List<FeastEntry> getIncomeByDept(){			return Collections.unmodifiableList(incomeByDept);		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcelList(this.incomeByDept, 0);		}		@Override		public void createFromParcel(Parcel source) {			this.incomeByDept.addAll(source.readParcelList(FeastEntry.CREATOR));		}				public final static Parcelable.Creator<FeastBuilder> CREATOR = new Parcelable.Creator<FeastBuilder>() {						@Override			public FeastBuilder[] newInstance(int size) {				return new FeastBuilder[size];			}						@Override			public FeastBuilder newInstance() {				return new FeastBuilder();			}		};	}		public static class UpdateBuilder implements Parcelable, Jsonable{				private final Order orderToUpdate = new Order(0);		private final List<Printer> printers = new ArrayList<Printer>();				private UpdateBuilder(){					}				public UpdateBuilder(Order oriOrder){			orderToUpdate.setId(oriOrder.getId());			orderToUpdate.setOrderDate(oriOrder.getOrderDate());		}				public UpdateBuilder addPrinters(List<Printer> printers){			this.printers.addAll(printers);			return this;		}				public UpdateBuilder addPrinter(int printerId){			printers.add(new Printer(printerId));			return this;		}				public List<Printer> getPrinters(){			return Collections.unmodifiableList(this.printers);		}				public UpdateBuilder addOri(OrderFood oriFood) throws BusinessException{			orderToUpdate.addFood(oriFood);			return this;		}				public UpdateBuilder addOri(List<OrderFood> oriFoods) throws BusinessException{			orderToUpdate.addFoods(oriFoods);			return this;		}				public UpdateBuilder addNew(OrderFood of, Staff staff) throws BusinessException{			orderToUpdate.addFood(of, staff);			return this;		}				public UpdateBuilder addNew(List<OrderFood> foodsToAdd, Staff staff) throws BusinessException{			if(foodsToAdd != null){				orderToUpdate.addFoods(foodsToAdd, staff);			}			return this;		}				public UpdateBuilder addWxOrder(WxOrder wxOrder){			this.orderToUpdate.addWxOrder(wxOrder);			return this;		}				public UpdateBuilder setWxOrders(List<WxOrder> wxOrders){			this.orderToUpdate.setWxOrders(wxOrders);			return this;		}				public UpdateBuilder setCustomNum(int customNum){			if(customNum >= 1){				orderToUpdate.setCustomNum(customNum);			}			return this;		}				public boolean isCustomChanged(){			return orderToUpdate.mCustomNum != 0;		}				public Order build(){			return orderToUpdate;		}		@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeParcel(orderToUpdate, Order.ORDER_PARCLEABLE_4_UPDATE);			dest.writeParcelList(printers, Printer.PARCEL_PRINTER_SIMPLE);		}		@Override		public void createFromParcel(Parcel source) {			orderToUpdate.copyFrom(source.readParcel(Order.CREATOR));			printers.addAll(source.readParcelList(Printer.CREATOR));		}				public final static Parcelable.Creator<UpdateBuilder> CREATOR = new Parcelable.Creator<UpdateBuilder>() {						@Override			public UpdateBuilder[] newInstance(int size) {				return new UpdateBuilder[size];			}						@Override			public UpdateBuilder newInstance() {				return new UpdateBuilder();			}		};		@Override		public JsonMap toJsonMap(int flag) {			throw new UnsupportedOperationException();		}		@Override		public void fromJsonMap(JsonMap jsonMap, int flag) {			//order id for update...must			if(jsonMap.containsKey(Key4Json.ORDER_ID.key)){				orderToUpdate.setId(jsonMap.getInt(Key4Json.ORDER_ID.key));			}else{				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.ORDER_ID + ")");			}			//order date...must			if(jsonMap.containsKey(Key4Json.ORDER_DATE.key)){				orderToUpdate.setOrderDate(jsonMap.getLong(Key4Json.ORDER_DATE.key));			}else{				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.ORDER_DATE + ")");			}			//custom number...optional			orderToUpdate.setCustomNum(jsonMap.getInt(Key4Json.CUSTOM_NUM.key));			//order foods...optional			for(OrderFood of : jsonMap.getJsonableList(Key4Json.ORDER_FOOD.key, OrderFood.JSON_CREATOR, OrderFood.OF_JSONABLE_4_COMMIT)){				orderToUpdate.addFood(of);			}		}			public static Jsonable.Creator<UpdateBuilder> JSON_CREATOR = new Jsonable.Creator<UpdateBuilder>() {			@Override			public UpdateBuilder newInstance() {				return new UpdateBuilder();			}		};	}		public static class PayBuilder implements Parcelable, Jsonable{				private int orderId;				//账单编号		private int customNum;				//就餐人数		private int erasePrice;				//抹数金额		private float receivedCash;			//收款金额		private PayType payType;			//付款类型				private MixedPayment mixedPayment = new MixedPayment();		private String comment;				//备注		private PrintOption printOption = PrintOption.DO_PRINT;		//是否打印		private boolean isTemp;				//是否暂结		private boolean sendSMS = false;	//是否发送短信通知		private final List<Printer> printers = new ArrayList<Printer>();				public static Jsonable.Creator<PayBuilder> JSON_CREATOR = new Jsonable.Creator<PayBuilder>() {			@Override			public PayBuilder newInstance() {				return new PayBuilder();			}		};				@Override		public JsonMap toJsonMap(int flag) {			JsonMap jm = new JsonMap();			jm.putInt("orderId", this.orderId);			jm.putInt("customNum", this.customNum);			jm.putInt("erasePrice", this.erasePrice);			jm.putFloat("receivedCash", this.receivedCash);			jm.putInt("payType", this.payType.getId());			jm.putString("comment", this.comment);			jm.putInt("printOption", this.printOption.getVal());			jm.putBoolean("sendSMS", this.sendSMS);			return jm;		}		@Override		public void fromJsonMap(JsonMap jm, int flag) {			this.orderId = jm.getInt("orderId");			this.customNum = jm.getInt("customNum");			this.erasePrice = jm.getInt("erasePrice");			this.receivedCash = jm.getFloat("receivedCash");			this.payType = new PayType(jm.getInt("payType"));			this.comment = jm.getString("comment");			this.printOption = PrintOption.valueOf(jm.getInt("printOption"));			this.sendSMS = jm.getBoolean("sendSMS");		}				@Override		public void writeToParcel(Parcel dest, int flag) {			dest.writeInt(orderId);			dest.writeInt(customNum);			dest.writeInt(erasePrice);			dest.writeFloat(receivedCash);			dest.writeParcel(payType, PayType.PAY_TYPE_PARCELABLE_SIMPLE);			dest.writeParcel(mixedPayment, 0);			dest.writeString(comment);			dest.writeByte(printOption.getVal());			dest.writeBoolean(isTemp);			dest.writeBoolean(sendSMS);			dest.writeParcelList(this.printers, Printer.PARCEL_PRINTER_SIMPLE);		}		@Override		public void createFromParcel(Parcel source) {			orderId = source.readInt();			customNum = source.readInt();			erasePrice = source.readInt();			receivedCash = source.readFloat();			payType = source.readParcel(PayType.CREATOR);			mixedPayment = source.readParcel(MixedPayment.CREATOR);			comment = source.readString();			printOption = PrintOption.valueOf(source.readByte());			isTemp = source.readBoolean();			sendSMS = source.readBoolean();			printers.addAll(source.readParcelList(Printer.CREATOR));		}				public final static Parcelable.Creator<PayBuilder> CREATOR = new Parcelable.Creator<PayBuilder>() {						@Override			public PayBuilder[] newInstance(int size) {				return new PayBuilder[size];			}						@Override			public PayBuilder newInstance() {				return new PayBuilder();			}		};				public static PayBuilder build4Normal(int orderId){			return build4Normal(orderId, PayType.CASH);		}				public static PayBuilder build4Normal(int orderId, PayType payType){			PayBuilder builder = new PayBuilder();			builder.orderId = orderId;			builder.mixedPayment.setOrderId(orderId);			builder.payType = payType;			return builder;		}				public static PayBuilder build4Member(int orderId, PayType payType, boolean sendSms){			PayBuilder builder = new PayBuilder();			builder.orderId = orderId;			builder.mixedPayment.setOrderId(orderId);			builder.payType = payType;			builder.sendSMS = sendSms;			return builder;		}				private PayBuilder(){					}				public PayBuilder addPrinter(int printerId){			this.printers.add(new Printer(printerId));			return this;		}				public List<Printer> getPrinters(){			return Collections.unmodifiableList(this.printers);		}				public PayBuilder addPayment(PayType payType, float price){			mixedPayment.add(payType, price);			if(mixedPayment.getPayments().size() == 1){				this.payType = payType;			}else{				this.payType = PayType.MIXED;			}			return this;		}				public MixedPayment getMixedPayment(){			return mixedPayment;		}				public int getOrderId(){			return this.orderId;		}				public boolean hasCustomNum(){			return this.customNum > 0;		}				public PayBuilder setCustomNum(int customNum){			if(customNum <= 0){				this.customNum = 1;			}else{				this.customNum = customNum;			}			return this;		}				public int getCustomNum(){			return this.customNum;		}				public PayBuilder setErasePrice(int erasePrice){			if(erasePrice < 0){				throw new IllegalArgumentException("加收服务费率的范围是'0.0 - 1.0'");			}else{				this.erasePrice = erasePrice;			}			return this;		}				public int getErasePrice(){			return this.erasePrice;		}				public PayType getPaymentType(){			return this.payType;		}				public PayBuilder setReceivedCash(float receviedCash){			if(receivedCash < 0){				throw new IllegalArgumentException();			}else{				this.receivedCash = receviedCash;			}			return this;		}				public float getReceivedCash(){			return this.receivedCash;		}				public boolean hasComment(){			return this.comment != null;		}				public PayBuilder setComment(String comment){			this.comment = comment;			return this;		}				public String getComment(){			return this.comment;		}				public PayBuilder setPrintOption(PrintOption option){			this.printOption = option;			return this;		}				public PrintOption getPrintOption(){			return this.printOption;		}				public PayBuilder setTemp(boolean onOff){			this.isTemp = onOff;			return this;		}				public boolean isTemp(){			return isTemp;		}				public boolean isSendSMS(){			return sendSMS;		}	}		/**	 * 结账类型	 * 1-会员,  2-普通	 */	public static enum SettleType{		NORMAL(1, "普通"), 		MEMBER(2, "会员");				private final int value;		private final String desc;				SettleType(int value, String text){			this.value = value;			this.desc = text;		}				public int getVal() {			return value;		}				public String getDesc() {			return desc;		}				public static SettleType valueOf(int value){			for(SettleType type : values()){				if(type.getVal() == value){					return type;				}			}			throw new IllegalArgumentException("The pay type(val = " + value + ") passed is invalid.");		}				@Override		public String toString(){			return "(type :" + value + ",text : " + this.desc + ")";		}				public boolean isNormal(){			return this == NORMAL;		}				public boolean isMember(){			return this == MEMBER;		}	}	/**	 * 账单状态	 * 1-未结帐,  2-已结帐,  3-反结帐	 */	public static enum Status{		UNPAID(0, "未结帐"),		PAID(1, "已结帐"),		REPAID(2, "反结帐");				private final int val;		private final String desc;				Status(int val, String desc){			this.val = val;			this.desc = desc;		}				@Override		public String toString(){ 			return "status(val = " + val + ",desc = " + desc + ")";		}				public static Status valueOf(int val){			for(Status status : values()){				if(status.val == val){					return status;				}			}			throw new IllegalArgumentException("The status(val = " + val + ") is invalid.");		}				public int getVal(){			return val;		}				public String getDesc(){			return desc;		}	}		/**	 * 账单类型	 * 1-一般,  2-外卖,  3-拆台,  4-快餐， 5-酒席入账	 */	public static enum Category{		NORMAL(		1,	"一般"),		TAKE_OUT(	2,	"外卖"),		JOIN(		3, 	"拆台"),		FAST(		4, 	"快餐"),		FEAST(		5, 	"酒席入账");		//MERGER_CHILD(5, "并台(子账单)");				private final int val;		private final String desc;				Category(int val, String desc){			this.val = val;			this.desc = desc;		}				@Override		public String toString(){			return "category(val = " + val + ",desc = " + desc + ")";		}				public static Category valueOf(int val){			for(Category category : values()){				if(category.val == val){					return category;				}			}			throw new IllegalArgumentException("The category(val = " + val + ") is invalid.");		}				public int getVal(){			return val;		}				public String getDesc(){			return desc;		}				public boolean isNormal(){			return this == NORMAL;		}				public boolean isTakeout(){			return this == TAKE_OUT;		}				public boolean isJoin(){			return this == JOIN;		}				public boolean isFast(){			return this == FAST;		}				public boolean isFeast(){			return this == FEAST;		}	}		//different kinds of order parcelable 	public final static byte ORDER_PARCELABLE_4_QUERY = 0;	public final static byte ORDER_PARCELABLE_4_INSERT = 1;	public final static byte ORDER_PARCLEABLE_4_UPDATE = 2;	private final static byte ORDER_PARCLEABLE_4_TRANSFER = 3;	private final static byte ORDER_PARCELABLE_4_GIFT = 4; 		//the id to this order	private int mId;			//the sequence id to this order	private int mSeqId;	//the restaurant id this order belong to	private int mRestaurantId;	//the staff id to this order	private int mStaffId;	//the waiter to this roder	private String mWaiter;	//the birth order date time	private long mBirthDate;	//the last modified order date time	private long mOrderDate;	//the category to this order	private Category mCategory = Category.NORMAL;		//the status to this order	private Status mStatus = Status.UNPAID;	//the settle type to this order	private SettleType mSettleType = SettleType.NORMAL;					//the pay type to this order	private PayType mPaymentType = PayType.CASH;					//the mixed payment to this order	private MixedPayment mMixedPayment;	//the order foods	private final List<OrderFood> mOrderFoods = new LinkedList<OrderFood>();	//the discount to this order	private Discount mDiscount;		//the discount date to this order	private long mDiscountDate;	//the staff id to discount this order	private int mDiscounterId;	//the staff to discount this order	private String mDiscounter;	//the destination table to this order	private Table mDestTbl;	//the custom number to this order	private int mCustomNum;				//the comment to this order	private String mComment;	//the erase price to this order	private int mErasePrice;	//the repaid price to this order	private float mRepaidPrice;	//the cash received from customer	private float mReceivedCash;			//the service plan to this order	private ServicePlan mServicePlan;	//the price plan to this order	private PricePlan mPricePlan;	//the service rate to this order	private float mServiceRate;	//the discount price to this order	private float mDiscountPrice;	//the cancel price to this order	private float mCancelPrice;	//the gift price to this order	private float mGiftPrice;	//the total price to this order	private float mTotalPrice;		//the pure price to this order	private float mPurePrice;	//the coupon price to this order	private float mCouponPrice = -1;	//如果客户没有设定尾数的处理方式，实收金额会等于合计金额,	//如果客户设定了尾数的处理方式，比如“抹零”、“四舍五入”等，实收金额就会根据不同处理方式变化	private float mActualPrice = 0;	//the weixin orders to this order	private final List<WxOrder> mWxOrders = new LinkedList<WxOrder>();	//the member id to this order	private int memberId;	//the used coupons to this order	private List<CouponOperation> usedCoupons = new LinkedList<CouponOperation>();	//the issued coupons to this order	private List<CouponOperation> issuedCoupons = new LinkedList<CouponOperation>();	//the temp paid staff	private String tempStaff;	//the temp paid date	private long tempDate;		public void setTempStaff(String tempStaff){		this.tempStaff = tempStaff;	}	public String getTempStaff(){		if(this.tempStaff == null){			return "";		}		return this.tempStaff;	}		public void setTempDate(long tempDate){		this.tempDate = tempDate;	}		public long getTempDate(){		return this.tempDate;	}		public void setComment(String comment){		this.mComment = comment;	}		public String getComment(){		if(this.mComment == null){			return "";		}else{			return this.mComment;		}	}		public void setPaymentType(PayType payType){		this.mPaymentType = payType;	}		public PayType getPaymentType(){		return this.mPaymentType;	}		public MixedPayment getMixedPayment(){		return this.mMixedPayment;	}		public void setMixedPayment(MixedPayment mixedPayment){		this.mMixedPayment = mixedPayment;	}		public void setSettleType(SettleType settleType){		this.mSettleType = settleType;	}		public SettleType getSettleType(){		return this.mSettleType;	}		public boolean isSettledByNormal(){		return this.mSettleType == SettleType.NORMAL;	}		public boolean isSettledByMember(){		return this.mSettleType == SettleType.MEMBER;	}		public void setCategory(Category category){		this.mCategory = category;	}		public Category getCategory(){		return mCategory;	}		public void setStatus(Status status){		this.mStatus = status;	}		public Status getStatus(){		return mStatus;	}		public boolean isUnpaid(){		return mStatus == Status.UNPAID;	}		public boolean isPaid(){		return mStatus == Status.PAID;	}		public boolean isRepaid(){		return mStatus == Status.REPAID;	}		public void setOrderFoods(List<OrderFood> orderFoods){		if(orderFoods != null){			mOrderFoods.clear();			addFoods(orderFoods);		}	}		public List<OrderFood> getOrderFoods(Comparator<OrderFood> comparator){		if(comparator != null){			List<OrderFood> orderFoods = SortedList.newInstance(mOrderFoods, comparator);			return orderFoods;		}else{			return Collections.unmodifiableList(mOrderFoods);		}	}		public List<OrderFood> getOrderFoods(){		return this.mOrderFoods;	}		public boolean hasOrderFood(){		return !mOrderFoods.isEmpty();	}		public int getSeqId() {		return mSeqId;	}	public void setSeqId(int seqId) {		this.mSeqId = seqId;	}	public int getRestaurantId() {		return mRestaurantId;	}	public void setRestaurantId(int restaurantId) {		this.mRestaurantId = restaurantId;	}	public void setWaiter(String waiter){		this.mWaiter = waiter;	}		public void setStaffId(int staffId){		this.mStaffId = staffId;	}		public int getStaffId(){		return this.mStaffId;	}		public String getWaiter(){		if(mWaiter == null){			return "";		}		return this.mWaiter;	}		public long getBirthDate() {		return mBirthDate;	}	public void setBirthDate(long birthDate) {		this.mBirthDate = birthDate;	}	public long getOrderDate() {		return mOrderDate;	}	public void setOrderDate(long orderDate) {		this.mOrderDate = orderDate;	}	public Region getRegion(){		if(this.mDestTbl == null){			this.mDestTbl= new Table(); 		}		return this.mDestTbl.getRegion();	}		public void setDestTbl(Table destTbl){		this.mDestTbl = destTbl;	}		public Table getDestTbl(){		if(this.mDestTbl == null){			this.mDestTbl= new Table(); 		}		return this.mDestTbl;	}		public void setCustomNum(int customNum){		this.mCustomNum = customNum;	}		public int getCustomNum(){		return mCustomNum;	}		public void setErasePrice(int erasePrice){		this.mErasePrice = erasePrice;	}		public int getErasePrice(){		return mErasePrice;	}		public void setServicePlan(ServicePlan servicePlan){		this.mServicePlan = servicePlan;	}		public ServicePlan getServicePlan(){		return this.mServicePlan;	}		public boolean hasServicePlan(){		return this.mServicePlan != null;	}		public void setPricePlan(PricePlan pricePlan){		this.mPricePlan = pricePlan;		for(OrderFood of : mOrderFoods){			of.setPricePlan(pricePlan);		}	}		public PricePlan getPricePlan(){		return this.mPricePlan;	}		public boolean hasPricePlan(){		return this.mPricePlan != null;	}		public float getServiceRate(){		return NumericUtil.roundFloat(mServiceRate);	}		public void setServiceRate(float rate){		if(rate < 0 || rate > 1){			throw new IllegalArgumentException("设置的服务费率不正确");		}		mServiceRate = rate;	}		public void setReceivedCash(float repaidPrice) {		mReceivedCash = repaidPrice;	}		public float getReceivedCash(){		return NumericUtil.roundFloat(mReceivedCash);	}	public void setRepaidPrice(float repaidPrice){		mRepaidPrice = repaidPrice;	}		public float getRepaidPrice(){		return NumericUtil.roundFloat(mRepaidPrice);	}		public void setDiscountPrice(float discountPrice){		mDiscountPrice = discountPrice;	}		public float getDiscountPrice(){		return NumericUtil.roundFloat(mDiscountPrice);	}		public void setCancelPrice(float cancelPrice){		mCancelPrice = cancelPrice;	}		public float getCancelPrice(){		return NumericUtil.roundFloat(mCancelPrice);	}		public void setGiftPrice(float giftPrice){		mGiftPrice = giftPrice;	}		public float getGiftPrice(){		return NumericUtil.roundFloat(mGiftPrice);	}		public void setTotalPrice(float totalPrice){		mTotalPrice = totalPrice;	}		public float getTotalPrice(){		return NumericUtil.roundFloat(mTotalPrice);	}		public void setPurePrice(float purePrice){		this.mPurePrice = purePrice;	}		public float getPurePrice(){		return this.mPurePrice;	}		public void setCouponPrice(float couponPrice){		this.mCouponPrice = couponPrice;	}		public float getCouponPrice(){		if(mCouponPrice < 0){			return 0;		}		return NumericUtil.roundFloat(mCouponPrice);	}		public void setActualPrice(float actualPrice){		this.mActualPrice = actualPrice;	}		public float getActualPrice(){		return NumericUtil.roundFloat(mActualPrice);	}		public boolean hasMember(){		return this.memberId != 0;	}		public int getMemberId(){		return this.memberId;	}		public void setMemberId(int memberId){		this.memberId = memberId;	}		public void addUsedCoupon(CouponOperation operation){		if(!this.usedCoupons.contains(operation)){			this.usedCoupons.add(operation);		}	}		public void setUsedCoupons(final List<CouponOperation> operations){		if(operations != null){			this.usedCoupons.clear();			this.usedCoupons.addAll(operations);		}	}		public List<CouponOperation> getUsedCoupons(){		return Collections.unmodifiableList(this.usedCoupons);	}		public boolean hasUsedCoupon(){		return this.mCouponPrice >= 0;	}	public void setIssuedCoupons(final List<CouponOperation> operations){		if(operations != null){			this.issuedCoupons.clear();			this.issuedCoupons.addAll(operations);		}	}	public List<CouponOperation> getIssuedCoupons(){		return Collections.unmodifiableList(this.issuedCoupons);	}		public boolean hasIssuedCoupons(){		return !this.issuedCoupons.isEmpty();	}		public Order(){			}	public Order(int id){		this.mId = id;	}		public Order(List<OrderFood> foods){		if(foods != null){			this.mOrderFoods.addAll(foods);		}	}		public Order(List<OrderFood> foods, int tableAlias, int customNum){		this(foods);		this.getDestTbl().setTableAlias(tableAlias);		this.mCustomNum = customNum;	}			public Order(int orderID, List<OrderFood> foods, int tableAlias, int customNum){		this(foods, tableAlias, customNum);		mId = orderID;	}		public Order(List<OrderFood> foods, short tableAlias, int customNum, float price){		this(foods, tableAlias, customNum);		setReceivedCash(price);	}		public Order(int orderID, List<OrderFood> foods, short tableAlias, int customNum, float price){		this(orderID, foods, tableAlias, customNum);		setReceivedCash(price);	}			public int getId(){		return mId;	}		public void setId(int id){		this.mId = id;	}		public void setDiscounter(String staff){		this.mDiscounter = staff;	}		public void setDiscounterId(int discounterId){		this.mDiscounterId = discounterId;	}		public int getDiscounterId(){		return this.mDiscounterId;	}		public String getDiscounter(){		if(this.mDiscounter == null){			return "";		}		return this.mDiscounter;	}		public void setDiscountDate(long discountDate){		this.mDiscountDate = discountDate;	}		public long getDiscountDate(){		return this.mDiscountDate;	}		public void addWxOrder(WxOrder wxOrder){		this.mWxOrders.add(wxOrder);	}		public void setWxOrders(List<WxOrder> wxOrders){		if(wxOrders != null){			this.mWxOrders.clear();			this.mWxOrders.addAll(wxOrders);		}	}		public boolean hasWxOrder(){		return !this.mWxOrders.isEmpty();	}		public List<WxOrder> getWxOrders(){		return Collections.unmodifiableList(this.mWxOrders);	}		/**	 * Set the discount to this order.	 * The discount to each food is also be set. 	 * @param discount The discount to be set.	 */	public void setDiscount(Discount discount){		this.mDiscount = discount;		for(OrderFood of : mOrderFoods){			boolean isFound = false;			if(discount != null){				for(DiscountPlan dp : discount.getPlans()){					if(of.getKitchen().equals(dp.getKitchen())){						of.setDiscount(dp.getRate());						isFound = true;						break;					}				}			}			if(!isFound){				of.setDiscount(1);			}		}	}		/**	 * Get the discount to this order.	 * @return The discount to this order.	 */	public Discount getDiscount(){		if(this.mDiscount == null){			return Discount.EMPTY;		}		return this.mDiscount;	}			public boolean hasDiscount(){		return this.mDiscount != null;	}		/**	 * Calculate the pure total price to this order as below.<br>	 * <pre>	 * for(each food){	 *    total += food.unitPrice * food.orderCount;	 * }	 * </pre>	 * @return the pure total price	 */	public float calcPureTotalPrice(){		float total = 0;		for(OrderFood of : mOrderFoods){			if(of.hasFoodUnit()){				total += of.getFoodUnit().getPrice() * of.getCount();			}else{				total += of.asFood().getPrice() * of.getCount();			}		}		return NumericUtil.roundFloat(total);	}		/**	 * Calculate the total price to this order as below.<br>	 * <pre>	 * for(each food){	 *    total += food.{@link OrderFood#calcPrice()}	 * }	 * total = total * (1 + serviceRate);	 * </pre>	 * @return the total price	 */	public float calcTotalPrice(){		float totalPrice = 0;		for(OrderFood of : mOrderFoods){			totalPrice += of.calcPrice();		}		return NumericUtil.roundFloat(totalPrice * (1 + getServiceRate()));	}		/**	 * Calculate the total price before discount to this order as below.<br>	 * <pre>	 * for(each food){	 *     total += food.{@link OrderFood#calcPriceBeforeDiscount()};	 * }	 * </pre>	 * @return The total price before discount to this order.	 */	public float calcPriceBeforeDiscount(){		float totalPrice = 0;		for(OrderFood of : mOrderFoods){			if(!of.isGift()){				totalPrice += of.calcPriceBeforeDiscount();			}		}		return NumericUtil.roundFloat(totalPrice);	}		/**	 * Calculate the total price of gifted foods.	 * <pre>	 * for(each food){	 *    total += food.{@link OrderFood#calcGiftPrice()}	 * }	 * @return the total price of gifted foods	 */	public float calcGiftPrice(){		float totalGifted = 0;		for(OrderFood of : mOrderFoods){			totalGifted += of.calcGiftPrice();		}		return NumericUtil.roundFloat(totalGifted);	}		/**	 * Calculate the total discount price.	 * <pre>	 * for(each food){	 *    total += food.{@link OrderFood#calcDiscountPrice()}	 * }	 * @return the total discount	 */	public float calcDiscountPrice(){		float totalDiscount = 0;		for(OrderFood of : mOrderFoods){			totalDiscount += of.calcDiscountPrice();		}		return NumericUtil.roundFloat(totalDiscount);	}		/**	 * Check to see whether the staff has the privilege to perform action on this food	 * @param of the food to check	 * @param staff the staff perform this action	 * @throws BusinessException	 * 			throws if the staff has no privilege to add food	 * 			throws if the staff has no privilege to present food	 */	private void checkPrivilege(OrderFood of, Staff staff) throws BusinessException{		if(!staff.getRole().hasPrivilege(Privilege.Code.ADD_FOOD)){			throw new BusinessException(StaffError.ORDER_NOT_ALLOW);					}else if(of.isGift() && !staff.getRole().hasPrivilege(Privilege.Code.GIFT)){			throw new BusinessException(StaffError.GIFT_NOT_ALLOW);		}	}		/**	 * Add the food to the list.	 * @param foodToAdd the food to add	 * @param staff the staff to add food	 * @throws BusinessException	 * 			throws if the order amount of the added food exceed MAX_ORDER_AMOUNT	 * 			throws if the staff has no privilege to add food	 * 			throws if the staff has no privilege to present food	 */	public void addFood(OrderFood foodToAdd, Staff staff) throws BusinessException{		checkPrivilege(foodToAdd, staff);				addFood(foodToAdd);	}		/**	 * Add the food to the list.	 * @param foodToAdd the food to add	 */	private void addFood(OrderFood foodToAdd){		//Check to see whether the food to add is already contained. 		int index = mOrderFoods.indexOf(foodToAdd);				//如果新添加的菜品在原来菜品List中已经存在相同的菜品，则累加数量		//否则添加到菜品列表		if(index >= 0){			mOrderFoods.get(index).addCount(foodToAdd.getCount());		}else{			mOrderFoods.add(foodToAdd);		}	}		/**	 * Add the foods to list.	 * @param foodsToAdd the foods to add	 * @param the staff to add foods	 * @throws BusinessException 	 * 			throws if the staff has no privilege to add food	 * 			throws if the staff has no privilege to present food	 */	public void addFoods(List<OrderFood> foodsToAdd, Staff staff) throws BusinessException{		//Check to see whether the staff has privilege to present food.		for(OrderFood foodToAdd : foodsToAdd){			checkPrivilege(foodToAdd, staff);		}		addFoods(foodsToAdd);	}		/**	 * Add the foods to list.	 * @param foodsToAdd the foods to add	 */	private void addFoods(List<OrderFood> foodsToAdd){		for(OrderFood foodToAdd : foodsToAdd){			addFood(foodToAdd);		}	}		/**	 * Delete the food from order without privilege check.	 * @param foodToDel the food to delete	 * @return true if the food to delete is found, otherwise false	 */	public boolean delete(OrderFood foodToDel){		if(foodToDel != null){			return mOrderFoods.remove(foodToDel);		}else{			return false;		}	}		/**	 * Remove the food.	 * @param foodToRemove the food to remove	 * @param staff the staff to remove the food	 * @return true if the food to remove is found, otherwise false.	 * @throws BusinessException 	 * 			throws if the staff does NOT own the cancel food privilege	 */	public boolean remove(OrderFood foodToRemove, Staff staff) throws BusinessException{		if(staff.getRole().hasPrivilege(Privilege.Code.CANCEL_FOOD)){			return mOrderFoods.remove(foodToRemove);		}else{			throw new BusinessException(StaffError.CANCEL_FOOD_NOT_ALLOW);		}	}	/**	 * Remove all the order foods from this order	 * @param staff the staff to remove foods	 * @throws BusinessException 	 * 			throws if the staff does NOT own the cancel food privilege	 */	public void removeAll(Staff staff) throws BusinessException{		if(staff.getRole().hasPrivilege(Privilege.Code.CANCEL_FOOD)){			mOrderFoods.clear();		}else{			throw new BusinessException(StaffError.CANCEL_FOOD_NOT_ALLOW);		}	}		/**	 * Replace with the food.	 * @param foodToReplace the food to replace	 * @return true if the food to replace exist before, otherwise false	 */	public boolean replace(OrderFood foodToReplace){		int index = mOrderFoods.indexOf(foodToReplace);		if(index >= 0){			mOrderFoods.set(index, foodToReplace);			return true;		}else{			return false;		}	}		/**	 * 	 */	public void trim(){		List<OrderFood> orderFoods = new ArrayList<OrderFood>(mOrderFoods);		mOrderFoods.clear();		addFoods(orderFoods);	}		public void copyFrom(Order src){		if(this != src && src != null){			this.setId(src.mId);			this.mActualPrice = src.mActualPrice;			this.mBirthDate = src.mBirthDate;			this.mCancelPrice = src.mCancelPrice;			this.mCategory = src.mCategory;			this.mCustomNum = src.mCustomNum;			this.mDestTbl = src.mDestTbl;			this.mDiscount = src.mDiscount;			this.mDiscountPrice = src.mDiscountPrice;			this.mErasePrice = src.mErasePrice;			this.mCouponPrice = src.mCouponPrice;			this.mGiftPrice = src.mGiftPrice;			this.mOrderDate = src.mOrderDate;			this.setOrderFoods(src.mOrderFoods);			this.setWxOrders(src.getWxOrders());			this.mPaymentType = src.mPaymentType;			this.mSettleType = src.mSettleType;			this.mReceivedCash = src.mReceivedCash;			this.mRepaidPrice = src.mRepaidPrice;			this.mRestaurantId = src.mRestaurantId;			this.mWaiter = src.mWaiter;			this.mSeqId = src.mSeqId;			this.mServiceRate = src.mServiceRate;			this.mStatus = src.mStatus;			this.mTotalPrice = src.mTotalPrice;			this.mComment = src.mComment;		}	}		@Override	public int hashCode(){		return 17 + 31 * mId;	}		@Override	public boolean equals(Object obj){		if(obj == null || !(obj instanceof Order)){			return false;		}else{			return mId == ((Order)obj).mId;		}	}		@Override	public String toString(){		return "order(id = " + mId + ")";	}		@Override	public void writeToParcel(Parcel dest, int flag) {		dest.writeByte(flag);		if(flag == ORDER_PARCELABLE_4_QUERY){			dest.writeInt(this.mId);			dest.writeParcel(this.mDestTbl, Table.TABLE_PARCELABLE_4_QUERY);			dest.writeLong(this.mBirthDate);			dest.writeLong(this.mOrderDate);			dest.writeByte(this.mCategory.getVal());			dest.writeByte(this.mCustomNum);			dest.writeString(this.mComment);			dest.writeParcel(this.mDiscount, Discount.DISCOUNT_PARCELABLE_SIMPLE);			dest.writeParcelList(this.mOrderFoods, OrderFood.OF_PARCELABLE_4_QUERY);					}else if(flag == ORDER_PARCELABLE_4_INSERT){			dest.writeParcel(this.mDestTbl, Table.TABLE_PARCELABLE_SIMPLE);			dest.writeParcelList(this.mOrderFoods, OrderFood.OF_PARCELABLE_4_COMMIT);			dest.writeInt(this.mCustomNum);			dest.writeByte(this.mCategory.getVal());			dest.writeString(this.mComment);			//dest.writeParcelList(this.mWxOrders, WxOrder.WX_ORDER_PARCELABLE_SIMPLE);					}else if(flag == ORDER_PARCLEABLE_4_UPDATE){			dest.writeInt(this.mId);			dest.writeParcelList(this.mOrderFoods, OrderFood.OF_PARCELABLE_4_COMMIT);			dest.writeLong(this.mOrderDate);			dest.writeInt(this.mCustomNum);			dest.writeByte(this.mCategory.getVal());			//dest.writeParcelList(this.mWxOrders, WxOrder.WX_ORDER_PARCELABLE_SIMPLE);					}else if(flag == ORDER_PARCLEABLE_4_TRANSFER){			dest.writeInt(this.mId);			dest.writeParcelList(this.mOrderFoods, OrderFood.OF_PARCELABLE_4_COMMIT);			dest.writeParcel(this.mDestTbl, Table.TABLE_PARCELABLE_SIMPLE);					}else if(flag == ORDER_PARCELABLE_4_GIFT){			dest.writeInt(this.mId);			dest.writeParcelList(this.mOrderFoods, OrderFood.OF_PARCELABLE_4_COMMIT);					}	}	@Override	public void createFromParcel(Parcel source) {		short flag = source.readByte();		if(flag == ORDER_PARCELABLE_4_QUERY){			this.mId = source.readInt();			this.mDestTbl = source.readParcel(Table.CREATOR);			this.mBirthDate = source.readLong();			this.mOrderDate = source.readLong();			this.mCategory = Category.valueOf(source.readByte());			this.mCustomNum = source.readByte();			this.mComment = source.readString();			this.mDiscount = source.readParcel(Discount.CREATOR);			this.setOrderFoods(source.readParcelList(OrderFood.CREATOR));					}else if(flag == ORDER_PARCELABLE_4_INSERT){			this.mDestTbl = source.readParcel(Table.CREATOR);			this.setOrderFoods(source.readParcelList(OrderFood.CREATOR));			this.mCustomNum = source.readInt();			this.mCategory = Category.valueOf(source.readByte());			this.mComment = source.readString();			//this.setWxOrders(source.readParcelList(WxOrder.CREATOR));					}else if(flag == ORDER_PARCLEABLE_4_UPDATE){			this.mId = source.readInt();			this.setOrderFoods(source.readParcelList(OrderFood.CREATOR));			this.mOrderDate = source.readLong();			this.mCustomNum = source.readInt();			this.mCategory = Category.valueOf(source.readByte());			//this.setWxOrders(source.readParcelList(WxOrder.CREATOR));					}else if(flag == ORDER_PARCLEABLE_4_TRANSFER){			this.mId = source.readInt();			this.setOrderFoods(source.readParcelList(OrderFood.CREATOR));			this.mDestTbl = source.readParcel(Table.CREATOR);					}else if(flag == ORDER_PARCELABLE_4_GIFT){			this.mId = source.readInt();			this.setOrderFoods(source.readParcelList(OrderFood.CREATOR));					}	}		public final static Parcelable.Creator<Order> CREATOR = new Parcelable.Creator<Order>() {				@Override		public Order[] newInstance(int size) {			return new Order[size];		}				@Override		public Order newInstance() {			return new Order();		}	};	public static enum Key4Json{		ORDER_ID("id", ""),		SEQ_ID("seqId", ""),		RESTAURANT_ID("rid", ""),		BIRTH_DATE("birthDate", ""),		BIRTH_DATE_TEXT("birthDateFormat", ""),		ORDER_DATE("orderDate", ""),		ORDER_DATE_TEXT("orderDateFormat", ""),		CATEGORY("categoryValue", ""),		CATEGORY_TEXT("categoryText", ""),		STATUS("statusValue", ""),		STATUS_TEXT("statusText", ""),		SETTLE_TYPE("settleTypeValue", ""),		SETTLE_TYPE_TEXT("settleTypeText", ""),		PAY_TYPE("payTypeValue", ""),		PAY_TYPE_TEXT("payTypeText", ""),		WAITER("waiter", ""),		DISCOUNT("discount", ""),		DISCOUNTER("discounter", ""),		TABLE("table", ""),		TABLE_ID("tableID", ""),		TABLE_ALIAS("tableAlias", ""),		CUSTOM_NUM("customNum", ""),		COMMENT("comment", ""),		RECEIVED_CASH("receivedCash", ""),		MIXED_PAYMENT("mixedPayment", ""),		ORDER_FOOD("orderFoods", "");						public final String key;		public final String desc;				Key4Json(String key, String desc){			this.key = key;			this.desc = desc;		}				@Override		public String toString(){			return "key = " + key + ", desc = " + desc;		}	}		@Override	public JsonMap toJsonMap(int flag) {		JsonMap jm = new JsonMap();		jm.putInt(Key4Json.ORDER_ID.key, this.mId);		jm.putInt(Key4Json.SEQ_ID.key, this.mSeqId);		jm.putInt(Key4Json.RESTAURANT_ID.key, this.mRestaurantId);		jm.putString(Key4Json.BIRTH_DATE.key, DateUtil.format(this.mBirthDate));		jm.putLong(Key4Json.ORDER_DATE.key, this.mOrderDate);		jm.putString(Key4Json.ORDER_DATE_TEXT.key, DateUtil.format(this.mOrderDate));		jm.putInt(Key4Json.CATEGORY.key, this.mCategory.getVal());		jm.putString(Key4Json.CATEGORY_TEXT.key, this.mCategory.getDesc());		jm.putInt(Key4Json.STATUS.key, this.mStatus.getVal());		jm.putString(Key4Json.STATUS_TEXT.key, this.mStatus.getDesc());		jm.putInt(Key4Json.SETTLE_TYPE.key, this.mSettleType.getVal());		jm.putString(Key4Json.SETTLE_TYPE_TEXT.key, this.mSettleType.getDesc());		jm.putInt(Key4Json.PAY_TYPE.key, this.mPaymentType.getId());		jm.putString(Key4Json.PAY_TYPE_TEXT.key, this.mPaymentType.getName());		jm.putString(Key4Json.WAITER.key, this.mWaiter);				jm.putJsonable(Key4Json.DISCOUNT.key, this.mDiscount, 0);		jm.putString("discounter", this.getDiscounter());		jm.putString("discountDate", this.getDiscountDate() > 0 ? DateUtil.format(this.getDiscountDate()) : "");		if(this.mDestTbl != null){			jm.putJsonable(Key4Json.TABLE.key, this.mDestTbl, 0);			jm.putInt(Key4Json.TABLE_ALIAS.key, this.mDestTbl.getAliasId());		}		jm.putInt(Key4Json.CUSTOM_NUM.key, this.mCustomNum);				jm.putJsonable("mixedPayment", this.getMixedPayment(), flag);				jm.putString(Key4Json.COMMENT.key, this.getComment().length() == 0 ? "----" : this.mComment);		jm.putFloat("repaidPrice", this.mRepaidPrice);		jm.putFloat(Key4Json.RECEIVED_CASH.key, this.mReceivedCash);		jm.putFloat("serviceRate", this.mServiceRate);		jm.putFloat("servicePlanId", hasServicePlan() ? getServicePlan().getPlanId() : 0);		jm.putFloat("discountPrice", this.mDiscountPrice);		jm.putFloat("cancelPrice", this.mCancelPrice);		jm.putFloat("giftPrice", this.mGiftPrice);		jm.putFloat("totalPrice", this.mTotalPrice);		jm.putInt("erasePrice", this.getErasePrice());		jm.putFloat("actualPrice", this.mActualPrice);		jm.putFloat("purePrice", this.mPurePrice);		jm.putJsonableList(Key4Json.ORDER_FOOD.key, this.mOrderFoods, 0);		jm.putBoolean("isWeixinOrder", this.hasWxOrder());		jm.putJsonableList("weixinOrder", this.mWxOrders, flag);		jm.putInt("memberId", memberId);				jm.putFloat("actualPriceBeforeDiscount", this.calcPriceBeforeDiscount());		jm.putFloat("pureTotalPrice", this.calcPureTotalPrice());				jm.putString("tempPayStaff", this.getTempStaff());		jm.putString("tempPayDate", DateUtil.format(this.getTempDate()));				jm.putFloat("couponPrice", this.getCouponPrice());		jm.putJsonableList("usedCoupons", this.getUsedCoupons(), 0);		jm.putJsonableList("issuedCoupons", this.getIssuedCoupons(), 0);				return jm;	}//	public final static int ORDER_JSONABLE_4_INSERT = 1;//	public final static int ORDER_JSONABLE_4_UPDATE = 7;		@Override	public void fromJsonMap(JsonMap jsonMap, int flag) {//		if(flag == ORDER_JSONABLE_4_INSERT){//			//table alias...must//			if(jsonMap.containsKey(Key4Json.TABLE_ALIAS.key)){//				getDestTbl().setTableAlias(jsonMap.getInt(Key4Json.TABLE_ALIAS.key));//			}else{//				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.TABLE_ALIAS + ")");//			}//			//		}else{//			//order id for update...must//			if(jsonMap.containsKey(Key4Json.ORDER_ID.key)){//				setId(jsonMap.getInt(Key4Json.ORDER_ID.key));//			}else{//				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.ORDER_ID + ")");//			}//			//table alias...must//			if(jsonMap.containsKey(Key4Json.TABLE_ALIAS.key)){//				getDestTbl().setTableAlias(jsonMap.getInt(Key4Json.TABLE_ALIAS.key));//			}else{//				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.TABLE_ALIAS + ")");//			}//			//order date...must//			if(jsonMap.containsKey(Key4Json.ORDER_DATE.key)){//				setOrderDate(jsonMap.getLong(Key4Json.ORDER_DATE.key));//			}else{//				throw new IllegalStateException("提交账单缺少字段(" + Key4Json.ORDER_DATE + ")");//			}//		}//		//category...optional//		if(jsonMap.containsKey(Key4Json.CATEGORY.key)){//			setCategory(Category.valueOf(jsonMap.getInt(Key4Json.CATEGORY.key)));//		}else{//			setCategory(Category.NORMAL);//		}//		//custom number...optional//		setCustomNum(jsonMap.getInt(Key4Json.CUSTOM_NUM.key));//		//order foods...optional//		for(OrderFood of : jsonMap.getJsonableList(Key4Json.ORDER_FOOD.key, OrderFood.JSON_CREATOR, OrderFood.OF_JSONABLE_4_COMMIT)){//			try {//				this.addFood(of);//			} catch (BusinessException ignored) {//			}//		}	}}